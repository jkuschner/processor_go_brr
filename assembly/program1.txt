spc 1               // save PC to PCreg1
movi r1, 0          // set r1(i) to 0
ld   r2, [r1]       // load LSW from data_mem[i]
add  r1, #1         // add 1 to i
ld   r3, [r1]       // load MSW from data_mem[i+1]
lsr  r4, r2, #4     // right shift LSW into tLSW
lsl  r5, r3, #4     // left shift MSW into tMSW
or   r5, r4         // store tLSW in tmp
rxr  r5             // store p8 in r5
lsl  r5, r5, #4     // put p8 in correct position
or   r6, r5         // store p8 in parity reg

lsl  r5, r3, #4     // left shift MSW into tMSW
lsr  r4, r2, #7     // right shift LSW into tLSW
lsl  r4, r4, #3     // reposition b8
or   r5, r4         // put b11:b8 into tMSW
lsl  r4, r2, #4     // left shift LSW into tLSW
lsr  r4, r4, #5     // reposition b4:b2
or   r5, r4         // puts 0_b11:b8_b4_b3_b2 into tRSW
rxr  r5             // store p4 in r5
lsl  r5, r5, #3     // put p4 in correct position
or   r6, r5         // store p4 in parity reg

lsr  r5, r3, #1     //tMSW = 0000_00_b11:b10
lsl  r5, r5, #5     //tMSW = 0_b11:b10_0_0000
lsl  r4, r2, #1     //tLSW = b7:b6_XX_XXX0
lsr  r4, r4, #6     //tLSW = 0000_00_b7:b6
lsl  r4, r4, #3     //tLSW = 000_b7:b6_000
or   r5, r4         //tMSW = 0_b11:b10_b7:b6_000
lsr  r4, r2, #2     //tLSW = 00XX_00_b4:b3
lsl  r4, r4, #6     //tLSW = b4:b3_00_0000
lsr  r4, r4, #5     //tLSW = 0000_0_b4:b3_0
or   r5, r4         //tMSW = 0_b11:b10_b7:b6_b4:b3_0
lsr  r4, r2, #7     //tLSW = b1_000_0000
lsr  r4, r4, #7     //tLSW = 0000_000b1
or   r5, r4         //tMSW = 0_b11:b10_b7:b6_b4:b3_b1
rxr  r5             //store p2 in r5
lsl  r5, r5, #2     //put p2 in correct position
or   r6, r5         //store p2 in parity reg

lsr  r5, r3, #2     //tMSW = 0000_000b11
lsl  r5, r5, #6     //tMSW = 0b11_00_0000
lsl  r4, r3, #7     //r4 = b9_000_0000
lsr  r4, r4, #2     //r4 = 00_b9_0_0000
or   r5, r4         //r5 = 0_b11_b9_0_0000
lsr  r4, r2, #6     //r4 = 0000_00Xb7
lsl  r4, r4, #7     //r4 = b7_000_0000
lsr  r4, r4, #3     //r4 = 000_b7_0000
or   r5, r4         //r5 = 0_b11_b9_b7_0000
lsr  r4, r2, #3     //r4 = 000X_XXb5:b4
lsl  r4, r4, #6     //r4 = b5:b4_00_0000
lsr  r4, r4, #4     //r4 = 0000_b5:b4_00
or   r5, r4         //r5 = 0_b11_b9_b7_b5_b4_00
lsl  r4, r2, #6     //r4 = b2:b1_00_0000
lsr  r4, r4, #6     //r4 = 0000_00b2:b1
or   r5, r4         //r5 = 0_b11_b9_b7_b5_b4_b2_b1
rxr  r5             //save p1 in r5
lsl  r5, r5, #1     //put p1 in correct position
or   r6, r5         // store p1 in parity reg

lsl  r4, r2, #0     // copy LSW into r4
rxr  r4             // rxr LSW
lsl  r5, r3, #0     // copy MSW into r5
rxr  r5             // rxr MSW
lsl  r5, r5, #7     // make room for parity
or   r5, r6         // copy parities into r5
rxr  r5             // rxr MSW+parities
lsl  r5, r5, #1     // make room for rxr LSW
or   r5, r4         // copy rxr LSW into r5
rxr  r5             // put p16 into r5
or   r6, r5         // store p16 in parity reg

lsl  r5, r3, #5     // r5 = b11:b9_0_0000
lsr  r4, r2, #4     // r4 = 0000_b8:b5
lsl  r4, r4, #1     // r4 = 000_b8:b5_0
or   r5, r4         // r5 = b11:b5:0
lsr  r4, r6, #4     // r4 = 0000_000p8
or   r5, r4         // r5 = b11:b5_p8
add  r1, #29        //  set i to correct addr(i+30)
str  r5, [r1]       // store r5 into data_mem[i+30]
lsr  r4, r2, #1     // r4 = 0000_0b4:b2
lsl  r4, r4, #5     // r4 = b4:b2_0_0000
lsl  r5, r6, #4     // r5 = p4_XXX_0000
lsr  r5, r5, #7     // r5 = 0000_000p4
lsl  r5, r5, #4     // r5 = 000_p4_0000
or   r4, r5         // r4 = b4:b2_p4_0000
lsl  r5, r2, #7     // r5 = b1_000_0000
lsr  r5, r5, #4     // r5 = 0000_b1_000
or   r4, r5         // r4 = b4:b2_p4_b1_000 
lsl  r5, r6, #5     // r5 = p2_p1_p16_0_0000
lsr  r5, r5, #5     // r5 = 0000_0_p2_p1_p16
or   r4, r5         // r4 = b4:b2_p4_b1_p2_p1_p16
add  r1, #1         // set i to i + 31
str  r4, [r1]       // store r4 into data_mem[i+31]
add  r1, #-29       // put i back to normal w/ an increment
lsl  r2, r1, #0     // store i into r2
lsl  r3, r3, #8     // clear r3
add  r3, #30        // set r3 to 30
xor  r2, r3         // set flag for loop cond.
je   #1


