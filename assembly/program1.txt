spc #1, #0         // save PC to PCreg1
mov #0             // move 0 into r8 (to copy into r1)
cpy r1             // set r1(i) to 0
ld  r2, [r1]       // load LSW from data_mem[i]
mov #1             // mov 1 into r8 (for upcoming add)
add r1, #0          // add 1 to i
ld  r3, [r1]       // load MSW from data_mem[i+1]
mov #4             // move 4 into r8 (for use in upcoming lsr)
lsr r4, r2         // right shift LSW into tLSW
mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r5, r3         // left shift MSW into tMSW
or  r5, r4         // store tLSW in tmp
rxr r5             // store p8 in r5
mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r5, r5         // put p8 in correct position
or  r6, r5         // store p8 in parity reg

mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r5, r3         // left shift MSW into tMSW
mov #7             // move 7 into r8 (for use in upcoming lsr)
lsr r4, r2         // right shift LSW into tLSW
mov #3             // move 3 into r8 (for use in upcoming lsl)
lsl r4, r4         // reposition b8
or  r5, r4         // put b11:b8 into tMSW
mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r4, r2         // left shift LSW into tLSW
mov #5             // move 5 into r8 (for use in upcoming lsr)
lsr r4, r4         // reposition b4:b2
or  r5, r4         // puts 0_b11:b8_b4_b3_b2 into tRSW
rxr r5             // store p4 in r5
mov #3             // move 3 into r8 (for use in upcoming lsl)
lsl r5, r5         // put p4 in correct position
or  r6, r5         // store p4 in parity reg

mov #1             // move 1 into r8 (for use in upcoming lsr)
lsr r5, r3         //tMSW = 0000_00_b11:b10
mov #5             // move 5 into r8 (for use in upcoming lsl)
lsl r5, r5         //tMSW = 0_b11:b10_0_0000
mov #1             // move 1 into r8 (for use in upcoming lsl)
lsl r4, r2         //tLSW = b7:b6_XX_XXX0
mov #6             // move 6 into r8 (for use in upcoming lsr)
lsr r4, r4         //tLSW = 0000_00_b7:b6
mov #3             // move 3 into r8 (for use in upcoming lsl)
lsl r4, r4         //tLSW = 000_b7:b6_000
or  r5, r4         //tMSW = 0_b11:b10_b7:b6_000
mov #2             // move 2 into r8 (for use in upcoming lsr)
lsr r4, r2         //tLSW = 00XX_00_b4:b3
mov #6             // move 6 into r8 (for use in upcoming lsl)
lsl r4, r4         //tLSW = b4:b3_00_0000
mov #5             // move 5 into r8 (for use in upcoming lsr)
lsr r4, r4         //tLSW = 0000_0_b4:b3_0
or  r5, r4         //tMSW = 0_b11:b10_b7:b6_b4:b3_0
mov #7             // move 7 into r8 (for use in upcoming lsr)
lsr r4, r2         //tLSW = b1_000_0000
mov #7             // move 7 into r8 (for use in upcoming lsr)
lsr r4, r4         //tLSW = 0000_000b1
or  r5, r4         //tMSW = 0_b11:b10_b7:b6_b4:b3_b1
rxr r5             //store p2 in r5
mov #2             // move 2 into r8 (for use in upcoming lsl)
lsl r5, r5         //put p2 in correct position
or  r6, r5         //store p2 in parity reg

mov #2             // move 2 into r8 (for use in upcoming lsr)
lsr r5, r3         //tMSW = 0000_000b11
mov #6             // move 6 into r8 (for use in upcoming lsl)
lsl r5, r5         //tMSW = 0b11_00_0000
mov #7             // move 7 into r8 (for use in upcoming lsl)
lsl r4, r3         //r4 = b9_000_0000
mov #2             // move 2 into r8 (for use in upcoming lsr)
lsr r4, r4         //r4 = 00_b9_0_0000
or  r5, r4         //r5 = 0_b11_b9_0_0000
mov #6             // move 6 into r8 (for use in upcoming lsr)
lsr r4, r2         //r4 = 0000_00Xb7
mov #7             // move 7 into r8 (for use in upcoming lsl)
lsl r4, r4         //r4 = b7_000_0000
mov #3             // move 3 into r8 (for use in upcoming lsr)
lsr r4, r4         //r4 = 000_b7_0000
or  r5, r4         //r5 = 0_b11_b9_b7_0000
mov #3             // move 3 into r8 (for use in upcoming lsr)
lsr r4, r2         //r4 = 000X_XXb5:b4
mov #6             // move 6 into r8 (for use in upcoming lsl)
lsl r4, r4         //r4 = b5:b4_00_0000
mov #4             // move 4 into r8 (for use in upcoming lsr)
lsr r4, r4, #4     //r4 = 0000_b5:b4_00
or  r5, r4         //r5 = 0_b11_b9_b7_b5_b4_00
mov #6             // move 6 into r8 (for use in upcoming lsl)
lsl r4, r2         //r4 = b2:b1_00_0000
mov #6             // move 6 into r8 (for use in upcoming lsr)
lsr r4, r4         //r4 = 0000_00b2:b1
or  r5, r4         //r5 = 0_b11_b9_b7_b5_b4_b2_b1
rxr r5             //save p1 in r5
mov #1             // move 1 into r8 (for use in upcoming lsr)
lsl r5, r5         //put p1 in correct position
or  r6, r5         // store p1 in parity reg

mov #0             // move 0 into r8 (for use in upcoming lsl)
lsl r4, r2         // copy LSW into r4
rxr r4             // rxr LSW
mov #0             // move 0 into r8 (for use in upcoming lsl)
lsl r5, r3         // copy MSW into r5
rxr r5             // rxr MSW
mov #7             // move 7 into r8 (for use in upcoming lsl)
lsl r5, r5         // make room for parity
or  r5, r6         // copy parities into r5
rxr r5             // rxr MSW+parities
mov #1             // move 1 into r8 (for use in upcoming lsl)
lsl r5, r5         // make room for rxr LSW
or  r5, r4         // copy rxr LSW into r5
rxr r5             // put p16 into r5
or  r6, r5         // store p16 in parity reg

mov #5             // move 5 into r8 (for use in upcoming lsl)
lsl r5, r3         // r5 = b11:b9_0_0000
mov #4             // move 4 into r8 (for use in upcoming lsr)
lsr r4, r2         // r4 = 0000_b8:b5
mov #1             // move 1 into r8 (for use in upcoming lsl)
lsl r4, r4         // r4 = 000_b8:b5_0
or  r5, r4         // r5 = b11:b5:0
mov #4             // move 4 into r8 (for use in upcoming lsr)
lsr r4, r6         // r4 = 0000_000p8
or  r5, r4         // r5 = b11:b5_p8
mov #29            // mov 29 into r8 (for upcoming add)
add r1, #0          //  set i to correct addr(i+30)
str r5             // store r5 into data_mem[i+30]
mov #1             // move 1 into r8 (for use in upcoming lsr)
lsr r4, r2         // r4 = 0000_0b4:b2
mov #5             // move 5 into r8 (for use in upcoming lsl)
lsl r4, r4         // r4 = b4:b2_0_0000
mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r5, r6         // r5 = p4_XXX_0000
mov #7             // move 7 into r8 (for use in upcoming lsr)
lsr r5, r5         // r5 = 0000_000p4
mov #4             // move 4 into r8 (for use in upcoming lsl)
lsl r5, r5         // r5 = 000_p4_0000
or  r4, r5         // r4 = b4:b2_p4_0000
mov #7             // move 7 into r8 (for use in upcoming lsl)
lsl r5, r2         // r5 = b1_000_0000
mov #4             // move 4 into r8 (for use in upcoming lsr)
lsr r5, r5         // r5 = 0000_b1_000
or  r4, r5         // r4 = b4:b2_p4_b1_000 
mov #5             // move 5 into r8 (for use in upcoming lsl)
lsl r5, r6         // r5 = p2_p1_p16_0_0000
mov #5             // move 5 into r8 (for use in upcoming lsr)
lsr r5, r5         // r5 = 0000_0_p2_p1_p16
or  r4, r5         // r4 = b4:b2_p4_b1_p2_p1_p16
mov #1             // mov 1 into r8 (for upcoming add)
add r1, #0          // set i to i + 31
str r4, [r1]       // store r4 into data_mem[i+31]
mov #29            // mov 29 into r8 (for upcoming add)
add r1, 1          // put i back to normal w/ an increment
mov #0             // move 0 into r8 (for use in upcoming lsl)
lsl r2, r1         // store i into r2
mov #8             // move 8 into r8 (for use in upcoming lsr)
lsl r3, r3         // clear r3
mov #30            // mov 30 into r8 (for upcoming add)
add r3, #0          // set r3 to 30
cpy r3             // r8 = r3 (other register for upcoming xor)
xor r2             // set flag for loop cond.
jne #1
