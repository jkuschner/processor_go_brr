mov r1, #20         // set r1 to 20
lsl r1, r1, #3      // multipy r1 by 8, r1 = 160
ld  r2, [r1]        // load data_mem[160] into r1(pattern)
ctc a               // clear act reg
ctc b               // clear bct reg
ctc c               // clear cct reg

mov r1, #128        // set r1 to 128(i)
spc #1              // start of outer loop
ctc b_flag          // clear b_flag reg
ld  r5, [r1]        // load data_mem[i] into r5(LSW)
mov r3, #159        //
xor r3, r1          // compare i to 159
spc #3, #4          // skip to line 18 on jump
je  #3
add r1, #1          // i = i+1
ld  r6, [r1]        // load data_mem[i+1] into r6(MSW)

mov r3, #0          // set r3 to 0(j)
spc #2, #0          // start of first inner loop
sbs r4              // r4 = LSW[j:j+5]_000
xor r4, r2          // compare r4 and pattern
spc #3, #5          // skip to line 27 on jump
jne #3
cti b_flag          // set b_flag to 1
cti a               // increment act
cti c               // increment cct
add r3, #1          // increment j
mov r7, #4          
xor r7, r3          // compare j to 4
jne #2

cbf                 // set zero flag based on b_flag
spc #3, #4          // skip to line 32 on jump
je  #3
cti b               // increment bct
ctc b_flag          // clear b_flag

mov r3, #0          // set r3 to 0(j)
mov r7, #159
xor r7, r1          // compare i to 159
spc #3, #9
je  #3
spc #2, #0          // start of second inner loop
dbs r4              // r4 = LSW[j:] + MSW[:j+5]
xor r4, r2          // compare r4 and pattern
spc #3, #4
jne #3
cti c               // increment cct
add r3, #1          // increment j
mov r7, #4          // r7 = 4
xor r7, r3          // compare j to 4
jne #2

add r1, #1          // increment i
mov r7, #160        // r7 = 160
xor r7, r1          // compare 160 and i
jne #1

cts a
cts b
cts c